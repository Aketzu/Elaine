/*<!--
 These are timeline setting. They control how it looks and feels.
 It is also very customizable and you can see some examples at:

   http://simile.mit.edu/timeline/examples/

 The controls for the timeline data are on the timeline_xml.rxml.
 They control what it contains.
-->*/

var tl;
var eventSource_with_subevents;
var eventSource_without_subevents;

/* For test purposes
var date1 = "Sun, 26 Jul 2006 12:50:00";
var date2 = "Sun, 26 Jul 2006 12:51:00";
*/

// Get server time
var date1 = "<%= @now1.strftime("%B %d %Y %H:%M:%S UTC") %>";
var date2 = "<%= @now2.strftime("%B %d %Y %H:%M:%S UTC") %>";

// Find out user's timezone
var orvo = new Date().toString();
var date = Timeline.DateTime.parseGregorianDateTime(orvo.substring(0, orvo.lastIndexOf("(")));
var timeZone = ((new Date(date)).getHours() - (new Date()).getHours());

var updateCurrentTimeInterval = 5000;
var centerToCurrentInterval   = 5000;
var centerToCurrentEnabled    = false;

var bandInfos;
var theme = Timeline.ClassicTheme.create();

function onLoad() {
  eventSource_with_subevents    = new Timeline.DefaultEventSource();
  eventSource_without_subevents = new Timeline.DefaultEventSource();

  var zones1 = [
  <% @playlists.each_with_index {|playlist, index| %>
      {   start:      "<%= playlist.start_time.strftime("%B %d %Y %H:%M:%S") %>",
          end:        "<%= playlist.end_time.strftime("%B %d %Y %H:%M:%S") %>",
          magnify:    1,
          unit:       Timeline.DateTime.MINUTE,
          multiple:   5
      }<% if @playlists.length - index > 1 %>,<% end %>
  <% } %>
  ];

  var zones2 = [
  <% @playlists.each_with_index {|playlist, index| %>
      {   start:      "<%= playlist.start_time.strftime("%B %d %Y %H:%M:%S") %>",
          end:        "<%= playlist.end_time.strftime("%B %d %Y %H:%M:%S") %>",
          magnify:    1,
          unit:       Timeline.DateTime.HOUR,
          multiple:   1
      }<% if @playlists.length - index > 1 %>,<% end %>
  <% } %>
  ];

  theme.event.label.width   = 250; // px
  theme.event.bubble.width  = 350;
  theme.event.bubble.height = 200;

  bandInfos = [
    Timeline.createHotZoneBandInfo({
      zones:          zones1,
      theme:          theme,
      eventSource:    eventSource_with_subevents,
      width:          "70%",
      intervalUnit:   Timeline.DateTime.HOUR,
      intervalPixels: 600
    }),
    Timeline.createHotZoneBandInfo({
      zones:          zones2,
      eventSource:    eventSource_without_subevents,
      width:          "26%",
      intervalUnit:   Timeline.DateTime.HOUR,
      intervalPixels: 100
    }),
    Timeline.createBandInfo({
      eventSource:    new Timeline.DefaultEventSource(),
      width:          "4%",
      intervalUnit:   Timeline.DateTime.DAY,
      intervalPixels: 500
    })
  ];
  bandInfos[1].syncWith = 0;
  bandInfos[2].syncWith = 0;
  bandInfos[1].highlight = true;
  bandInfos[2].highlight = true;
/*  bandInfos[1].eventPainter.setLayout(bandInfos[0].eventPainter.getLayout());*/

  Timeline.loadXML("/playlists/timeline_xml?show_events=1", function(xml, url) { eventSource_with_subevents.loadXML(xml, url); });
  Timeline.loadXML("/playlists/timeline_xml", function(xml, url) { eventSource_without_subevents.loadXML(xml, url); });
  tl = Timeline.create(document.getElementById("playlist_timeline"), bandInfos);
  tl.getBand(0).setCenterVisibleDate(Timeline.DateTime.parseGregorianDateTime(date1));
  updateCurrentTimeIndicator();
  /*
  setTimeout("centerTimeline()", centerToCurrentInterval);
  Timeline.loadXML("/playlists/timeline_xml", function(xml, url) { eventSource.loadXML(xml, url); });
  setupFilterHighlightControls(document.getElementById("controls"), tl, [0,1], theme);
  */
}

function updateCurrentTimeIndicator() {
  date1 = new Date();
  date1.setHours((date1.getHours() + 3) % 24);
  date2 = new Date(new Date((new Date()).valueOf() + 60000));
  date2.setHours((date2.getHours() + 3) % 24);

  if(centerToCurrentEnabled) {
    for (var i = 0; bandInfos.length > i; i++) {
      bandInfos[i].decorators = [
        new Timeline.SpanHighlightDecorator({
          startDate:  date1,
          endDate:    date2,
          startLabel: "",
          endLabel:   "",
          color:      "#FFC080",
          opacity:    50,
          theme:      theme
        })
      ];
      date2 = new Date(new Date((new Date()).valueOf() + 200000 * (i+1)));
      date2.setHours((date2.getHours() + 3) % 24);
      date2 = date2.toUTCString();
    }
    tl = Timeline.create(document.getElementById("playlist_timeline"), bandInfos);
    tl.getBand(0).setCenterVisibleDate(Timeline.DateTime.parseGregorianDateTime(date1.toString()));
  }
  setTimeout("updateCurrentTimeIndicator()", updateCurrentTimeInterval);
}

function closeBubbles() {
  tl.getBand(0).closeBubble();
}

function toggleCenter() {
  centerToCurrentEnabled = !centerToCurrentEnabled;

  if(centerToCurrentEnabled) {
    updateCurrentTimeIndicator();
  }
  else {
    for (var i = 0; bandInfos.length > i; i++) {
      bandInfos[i].decorators = [];
    }
    tl = Timeline.create(document.getElementById("playlist_timeline"), bandInfos);
    tl.getBand(0).setCenterVisibleDate(Timeline.DateTime.parseGregorianDateTime(date1.toString()));
  }
  
  return centerToCurrentEnabled;
}

function centerTimeline() {
  var date = new Date();
  date.setHours((date1.getHours() + timeZone) % 24);
  if(centerToCurrentEnabled) {
    tl.getBand(0).setCenterVisibleDate(Timeline.DateTime.parseGregorianDateTime(date.toString()));
    tl.getBand(1).setCenterVisibleDate(Timeline.DateTime.parseGregorianDateTime(date.toString()));
  }
  setTimeout("centerTimeline()", centerToCurrentInterval);
}

var resizeTimerID = null;
function onResize() {
  if (resizeTimerID == null) {
    resizeTimerID = window.setTimeout(function() {
      resizeTimerID = null;
      tl.layout();
    }, 500);
  }
}
